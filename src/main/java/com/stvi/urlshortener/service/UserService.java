package com.stvi.urlshortener.service;

import com.stvi.urlshortener.entity.UserAccount;
import com.stvi.urlshortener.repository.UserAccountRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UserService {
    private final UserAccountRepository userRepo;

    /**
     * Registers/saves a new user account in the database
     * @param  proposedUserAccount The new account credentials encapsulated in a UserAccount object
     * @return The UserAccount Object that we save into the database
     */
    public UserAccount registerNewUser(UserAccount proposedUserAccount){ return userRepo.save(proposedUserAccount); }

    /**
     * Retrieves the user account with the specified ID
     * @param id The unique user ID (primary key) autogenerated by the database
     * @return The UserAccount Object with the user ID in question
     */
    public UserAccount getUserById(int id){ return userRepo.findById(id); }

    /**
     * Retreives the user account with the specified USERNAME
     * @param username The username of the account we're looking for
     * @return The UserAccount Object with the USERNAME in question
     */
    public UserAccount getUserByUsername(String username){ return userRepo.findByUsername(username); }

    /**
     * Checks if a UserAccount with the USERNAME in question exists in the database
     * @param username The username of the account we're looking for
     * @return True if UserAccount is found, false otherwise
     */
    public boolean doesUsernameExist(String username){ return userRepo.findByUsername(username) != null; }

    /**
     * Checks if a UserAccount with the EMAIL in question exists in the database
     * @param email The email of the account we're looking for
     * @return True if UserAccount is found, false otherwise
     */
    public boolean doesEmailExist(String email){ return userRepo.findByEmail(email) != null; }
}